{"version":3,"sources":["StudentRow.jsx","StudentTable.jsx","StudentForm.jsx","Delete.jsx","Students.jsx","App.js","registerServiceWorker.js","index.js"],"names":["StudentRow","props","state","this","student","rank","sort","name","marks","React","Component","StudentTable","data","rows","map","index","push","StudentForm","handleNameChange","bind","handleMarksChange","handleSubmit","event","setState","target","value","addStudent","preventDefault","onSubmit","type","onChange","Delete","id","body","Students","sortdata","fetchStudents","sortStudents","fetch","then","result","json","items","console","log","sortBy","reverse","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d7be08a8.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass StudentRow extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    const { student, rank, sort } = this.props\r\n    return (\r\n      <tr>\r\n        <td>{sort ? rank+1 : ''}</td>\r\n        <td>{student.name}</td>\r\n        <td>{student.marks}</td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nStudentRow.propTypes = {\r\n  student: PropTypes.object.isRequired\r\n};\r\n\r\nexport default StudentRow;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport StudentRow from './StudentRow'\r\n\r\nclass StudentTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { data, sort } = this.props;\r\n    const rows = []\r\n    data.map((student, index) => {\r\n      rows.push(\r\n        <StudentRow\r\n          student={student}\r\n          rank={index}\r\n          key={index}\r\n          sort={sort}\r\n        />)\r\n    })\r\n\r\n    return (\r\n      <div>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>{sort ? 'Rank' : ''}</th>\r\n              <th>Name</th>\r\n              <th>Marks</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{rows}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nStudentTable.propTypes = {\r\n  data: PropTypes.arrayOf(PropTypes.object).isRequired\r\n};\r\n\r\nexport default StudentTable;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass StudentForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name:'',\r\n      marks:''\r\n    };\r\n    this.handleNameChange = this.handleNameChange.bind(this);\r\n    this.handleMarksChange = this.handleMarksChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleMarksChange(event) {\r\n    this.setState({marks: event.target.value});\r\n  }\r\n\r\n  handleNameChange(event) {\r\n    this.setState({name: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    this.props.addStudent(this.state.name, this.state.marks);\r\n    this.setState({\r\n      name: '',\r\n      marks: ''\r\n    }\r\n    );\r\n    // this.props.sortStudents();\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name:\r\n          <input type=\"text\" value={this.state.name} onChange={this.handleNameChange} />\r\n        </label>\r\n        <label>\r\n          Marks:\r\n          <input type=\"number\" value={this.state.marks} onChange={this.handleMarksChange} />\r\n        <input type=\"submit\" value=\"submit\"/>\r\n        </label>\r\n        \r\n      </form>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nStudentForm.propTypes = {\r\n  addStudent: PropTypes.func.isRequired\r\n};\r\n\r\nexport default StudentForm;","import React from 'react';\r\nclass Delete extends React.Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n                <li>\r\n                     {this.props.id}\r\n                    <br/>\r\n                    {this.props.body}\r\n                    <br/>\r\n                    <hr/>\r\n                </li>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\nexport default Delete;","import React from 'react';\r\n\r\nimport StudentTable from './StudentTable';\r\nimport StudentForm from './StudentForm';\r\nimport Delete from './Delete';\r\nimport sortBy from \"lodash/sortBy\"\r\n\r\nclass Students extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [{\"id\":1,\"name\":\"student1\",\"marks\":56,},\r\n              {\"id\":2,\"name\":\"student2\",\"marks\":8},\r\n              {\"id\":3,\"name\":\"student3\",\"marks\":100},\r\n              {\"id\":4,\"name\":\"student4\",\"marks\":88},\r\n              {\"id\":5,\"name\":\"student5\",\"marks\":56},\r\n              ],\r\n      sortdata: []\r\n    };\r\n\r\n    this.fetchStudents = this.fetchStudents.bind(this);\r\n    this.addStudent = this.addStudent.bind(this);\r\n    this.sortStudents = this.sortStudents.bind(this);\r\n  }\r\n\r\n  fetchStudents(){\r\n    fetch(\"https://my.api.mockaroo.com/students.json?key=5dde5e00\")\r\n    .then(result=>result.json())\r\n    .then(items=>this.setState({data: items}))\r\n  }\r\n\r\n  addStudent(name, marks){\r\n    let student = {name, marks}\r\n    console.log(student);\r\n\r\n    this.setState({\r\n      data: [...this.state.data, student]\r\n    },() => this.sortStudents());\r\n  }\r\n\r\n  sortStudents(){\r\n    let sortdata = sortBy(this.state.data, \"marks\").reverse();\r\n    this.setState({sortdata})\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.sortStudents();\r\n  }\r\n\r\n  render() {\r\n    return(\r\n              \r\n            \r\n    \r\n          \r\n      <div>\r\n        <StudentForm addStudent={this.addStudent} />\r\n        <StudentTable data={this.state.data} sort={false} />\r\n        <StudentTable data={this.state.sortdata} sort={true} />\r\n        <Delete />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nStudents.propTypes = {};\r\n\r\nexport default Students;","import React, { Component } from 'react';\r\nimport Students from './Students';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render(){\r\n  \r\n  \r\n    return (\r\n      <div className=\"App\">\r\n        <Students />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (!isLocalhost) {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        } else {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}